class Solution {
public:
    int find_parent(int node,int parent[]){
        if(node==parent[node]){
            return node;
        }
        return parent[node]=find_parent(parent[node],parent);
    }
    void unioun_by_rank(int a,int b,int parent[],int rank[]){
        int parent_a=find_parent(a,parent);
        int parent_b=find_parent(b,parent);
        if(rank[parent_a]>rank[parent_b]){
            parent[parent_b]=parent_a;
        }else if(rank[parent_b]>rank[parent_a]){
            parent[parent_a]=parent_b;
        }else {
            parent[parent_a]=parent_b;
            rank[parent_b]++;
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        int parent[n],rank[n];
        for(int i=0;i<n;i++){
            parent[i]=i;
            rank[i]=0;
        }
        int extra_node=0;
        for(int i=0;i<connections.size();i++){
            int u=connections[i][0];
            int v=connections[i][1];
            if(find_parent(u,parent)==find_parent(v,parent)){
                extra_node++;
            }else{
                unioun_by_rank(u,v,parent,rank);
            }
        }
        int count_connected=0;
        for(int i=0;i<n;i++){
            if(i==parent[i]){
                count_connected++;
            }
        }
        if(extra_node>=count_connected-1){
            return count_connected-1;
        }
        return -1;
    }
};
