class Solution {
public:   
    int find_parent(int node,int parent[]){
        if(node==parent[node]){
            return node;
        }
        return parent[node]=find_parent(parent[node],parent);
    }
    void unioun_by_rank(int a,int b,int parent[],int rank[]){
        int parent_a=find_parent(a,parent);
        int parent_b=find_parent(b,parent);
        if(rank[parent_a]>rank[parent_b]){
            parent[parent_b]=parent_a;
        }else if(rank[parent_b]>rank[parent_a]){
            parent[parent_a]=parent_b;
        }else {
            parent[parent_a]=parent_b;
            rank[parent_b]++;
        }
    }
    long long countPairs(int n, vector<vector<int>>& edges) {
        long long int ans=0;
        int parent[n],rank[n];
        for(int i=0;i<n;i++){
            parent[i]=i;
            rank[i]=0;
        }
        for(int i=0;i<edges.size();i++){
            int u=edges[i][0];
            int v=edges[i][1];
            if(find_parent(u,parent)!=find_parent(v,parent)){
                unioun_by_rank(u,v,parent,rank);
            }
        }
        unordered_map<int,int>umap;
        for(int i=0;i<n;i++){
            int p=find_parent(i,parent);
            umap[p]++;
        }
        for(auto nbr:umap){
            long long int len=nbr.second;
            long long int v=(len*(n-len));
            ans+=v;
            n-=len;
        }
        return ans;
    }
};
