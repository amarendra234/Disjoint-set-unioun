class Solution {
public:
    int find_parent(int node,int parent[]){
        if(node==parent[node]){
            return node;
        }
        return parent[node]=find_parent(parent[node],parent);
    }
        void union_by_rank(int a,int b,int parent[],int rank[]){
        int parent_a=find_parent(a,parent);
        int parent_b=find_parent(b,parent);
        
        if(rank[parent_a]>rank[parent_b]){
            parent[parent_b]=parent_a;
        }else if(rank[parent_b]>rank[parent_a]){
            parent[parent_a]=parent_b;
        }else{
            parent[parent_a]=parent_b;
            rank[parent_b]++;
        }
    }
    bool equationsPossible(vector<string>& equations) {
        int parent[26];
        int rank[26];
        for(int i=0;i<26;i++){
            parent[i]=i;
            rank[i]=0;
        }
        for(int i=0;i<equations.size();i++){
            if(equations[i][1]=='='){
                int a=equations[i][0]-'a';
                int b=equations[i][3]-'a';
                union_by_rank(a,b,parent,rank);
            }
        }
          for(int i=0;i<equations.size();i++){
            if(equations[i][1]=='!'){
                int a=equations[i][0]-'a';
                int b=equations[i][3]-'a';
               if(find_parent(a,parent)==find_parent(b,parent)){
                     return false;
               }
            }
        }
        return true;
    }
};
